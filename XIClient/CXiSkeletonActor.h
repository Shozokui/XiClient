#pragma once
#include "CXiCollisionActor.h"
#include "CYyModel.h"
#include "KzCibCollect.h"
#include "WMatrix.h"
#include "OTStruct.h"
#include "LittleStruct.h"

namespace FFXI {
	namespace CYy {
		class CXiSkeletonActorRes; class CMoResource; class CYyResfList; class CYyTex;
		class CXiSkeletonActor : public CXiCollisionActor {
		public:
			const static CYyClass CXiSkeletonActorClass;
			static D3DLIGHT8* g_light;
			static D3DLIGHT8 g_light_arr[4];
			static float skeleton_subsitute[18];
			static D3DCOLOR ActorAmbientLight;
			virtual const CYyClass* GetRuntimeClass() override;
			virtual char OnMove() override;
			virtual bool VirtSkeletonActor247() final;
			CXiSkeletonActor(int);
			void SetUp(int);
			void Init();
			void SetModelWep(int);
			void SetEquipModel(CYyResourceFile**, int, int, bool);
			bool SetModels(int);
			void Set5FC(D3DXVECTOR4*);
			void Set61C(D3DXVECTOR4*);
			void SetSomeFlag(char);
			void SetFile(CYyResourceFile**, int);
			void InitFromFile(CYyResourceFile**);
			void AddOS2s(CMoResource**, CYyModelBase*);
			void Negativea2();
			void* Unknown7E4Func(int);
			void Draw();
			void SomeCameraUpdate();
			void BaseDoSomething();
			void SetDrawBasicFlags();
			void Tick();
			void SomeMatrixMath(FFXI::Math::WMatrix*, float);
			void ReadMotionPackPolling();
			void ReadStdMotionRes();
			float GetAttackReach();
			unsigned int GetWaistDatIndex(int, int, int);
			unsigned int GetUpperBodyDatIndex(int, int);
			bool IsReadCompleteResList();
			void AddMotRes(CMoResource**, int);
			void SelectMotionResId(float, int*, float*);
			CYyResfList* FindResfList(int);
			void AppendNewResp(CYyResourceFile**, int, int, int);
			void DefaultMove(D3DXVECTOR3*);
			float GetMoveVectorRatio(D3DXVECTOR3*);
			double GetRetIdleFrameTailQue();
			void ShowWeapon(int, int);
			void ShowAllWeapons(int);
			void HideWeapon(int, int);
			void HideAllWeapons(int);
			bool SetSystemMotion(int, float, float, int, float, float, int, int, int, int, CYyResourceFile**);
			bool SetMotion(CYyResourceFile**, int, float, float, int, float, float, int, int, int, int);
			void MaybeHideWepScheduler(int);
			void MaybeShowWepScheduler(int);
			FFXI::Math::WMatrix* field_5F8;
			D3DXVECTOR4 field_5FC;
			D3DXVECTOR4 field_60C;
			D3DXVECTOR4 field_61C;
			D3DXVECTOR4 field_62C;
			int field_63C;
			int field_640;
			int field_644;
			int field_648;
			int field_64C;
			int field_650;
			int field_654;
			int field_658;
			int field_65C;
			int field_660;
			float field_664;
			int field_668;
			int field_66C;
			short field_670;
			short field_672;
			CYyModel Model;
			int field_730;
			int field_734;
			int field_738;
			float field_73C;
			float field_740;
			float field_744;
			int field_748;
			int field_74C;
			int field_750;
			float field_754;
			float field_758;
			float field_75C;
			float field_760;
			int field_764;
			CXiActor* field_768[12];
			int field_798;
			char MotionLock;
			char field_79D;
			char field_79E;
			char field_79F;
			int field_7A0;
			int field_7A4;
			CMoAttachmentsSubStruct field_7A8;
			D3DXVECTOR4 field_7B4;
			int field_7C4;
			int field_7C8[5];
			float field_7DC;
			float field_7E0;
			CYyResfList* field_7E4;
			int field_7E8;
			int field_7EC;
			int field_7F0;
			int field_7F4;
			int field_7F8;
			int field_7FC;
			int field_800;
			int field_804;
			int field_808;
			int field_80C;
			int field_810;
			int field_814;
			int field_818;
			int field_81C;
			int field_820;
			float field_824;
			float field_828;
			D3DXVECTOR3 field_82C;
			int field_838;
			char field_83C[4];
			unsigned int field_840;
			float field_844;
			D3DXVECTOR4 field_848;
			FFXI::CYy::CMoResource** veve_texinfo;
			FFXI::CYy::CMoResource** null_maxresource;
			FFXI::CYy::CMoResource** ohno_texinfo;
			CYyResourceFile** field_864;
			FFXI::CYy::CYyTex* some_cubemap;
			int field_86C;
			float field_870;
			float field_874;
			KzCibCollect CibCollect;
			int field_8A0;
			char field_8A4;
			char field_8A5;
			char field_8A6;
			char field_8A7;
			char field_8A8;
			char field_8A9;
			char field_8AA;
			char field_8AB;
			char field_8AC;
			char field_8AD;
			char field_8AE;
			char field_8AF;
			int field_8B0;
			char field_8B4;
			char field_8B5;
			char field_8B6;
			char field_8B7;
			float field_8B8;
			float field_8BC;
			int field_8C0;
			int field_8C4;
			OTStruct field_8C8;
			char field_8E8;
			char field_8E9;
			char field_8EA;
			char field_8EB;
			int field_8EC;
			FFXI::LittleStruct field_8F0;
			float field_8F8;
			float field_8FC;
			float field_900;
			int field_904;
			float field_908;
			float field_90C;
			float field_910;
			int field_914;
			D3DXVECTOR3 field_918;
			int field_924;
			D3DXVECTOR4 field_928[7];
			FFXI::Math::WMatrix field_998;
			D3DXVECTOR4 field_9D8;
			char field_9E8;
			char field_9E9;
			char field_9EA;
			char field_9EB;
			int field_9EC;
			int field_9F0;
			int field_9F4;
			char field_9F8;
			char field_9F9;
			char field_9FA;
			char field_9FB;
			int field_9FC;
			int field_A00;
			char field_A04;
			char field_A05;
			char field_A06;
			char field_A07;
			CXiSkeletonActorRes* field_A08;
			virtual int VirtActor6() override final;
			virtual void VirtActor11() override final;
			virtual float GetWidthScale() override final;
			virtual float GetHeightScale() override final;
			virtual float GetDepthScale() override final;
			virtual void VirtActor32(char) override final;
			virtual void VirtActor34(char) override final;
			virtual void VirtActor36(char) override final;
			virtual void VirtActor38(char) override final;
			virtual void VirtActor40(char) override final;
			virtual bool VirtActor75() override final;
			virtual void VirtActor89() override final;
			virtual void VirtActor90() override final;
			virtual D3DXVECTOR4* VirtActor101() override final;
			virtual D3DXVECTOR4* VirtActor102() override final;
			virtual void VirtActor103(int, D3DXVECTOR4*) override final;
			virtual void GetElemLocal(unsigned int, D3DXVECTOR4*) override final;//104
			virtual void ActorFindResource(CMoResource***, int, int) override final;
			virtual void SetMotionLock(bool) override final;
			virtual bool IsMotionLock() override final;
			virtual void OnDraw() override;
			virtual void VirtActor154(CYyResourceFile**) override final;
			virtual bool SetAction(int, CXiActor*, void*) override final;
			virtual bool IsDirectionLock() override final;
			virtual void SetConstrain(char, int) override final;
			virtual short IsConstrain() override final;
			virtual void VirtActor191(char, int) override final;
			virtual char VirtActor192(int) override final;
			virtual float* VirtActor232(bool) override final;
			virtual KzCibCollect* VirtActor236() override final;
			virtual short VirtActor238() override final;
			virtual void VirtSkeletonActor246(CYyResourceFile***) final;
		};
	}
}